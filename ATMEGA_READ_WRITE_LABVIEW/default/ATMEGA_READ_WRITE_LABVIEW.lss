
ATMEGA_READ_WRITE_LABVIEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000005ea  0000065e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000013b  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000be7  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004ff  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000923  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021b  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004ee  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f0  00000000  00000000  00002abd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_11>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  7a:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <delay>:
#include"string.h"
#include<stdlib.h>
#include <avr/interrupt.h>

void delay(uint16_t count)
{
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	4a ef       	ldi	r20, 0xFA	; 250
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	05 c0       	rjmp	.+10     	; 0x96 <delay+0x14>
  8c:	fa 01       	movw	r30, r20
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <delay+0xc>
	uint16_t i;
	for(i=0;i<count;i++)
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	28 17       	cp	r18, r24
  98:	39 07       	cpc	r19, r25
  9a:	c0 f3       	brcs	.-16     	; 0x8c <delay+0xa>
	_delay_ms(1);
}
  9c:	08 95       	ret

0000009e <__vector_13>:
		LCDWriteStringXY(0,1,"REVERSE");
		}
    }
	
ISR(USART_TXC_vect)
		{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
		cli();
  a8:	f8 94       	cli
		}
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_11>:

       }
 }

 ISR(USART_RXC_vect)
	{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
       char data= USARTReadChar();
  d6:	0e 94 2c 02 	call	0x458	; 0x458 <USARTReadChar>
	if(data=='X')
  da:	88 35       	cpi	r24, 0x58	; 88
  dc:	79 f4       	brne	.+30     	; 0xfc <__vector_11+0x48>
	   {
	    LCDClear();
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
	 	PORTB=0b00000001;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	88 bb       	out	0x18, r24	; 24
		LCDWriteStringXY(0,1,"FORWARD");
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	0e 94 1c 02 	call	0x438	; 0x438 <LCDGotoXY>
  f6:	80 e6       	ldi	r24, 0x60	; 96
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	10 c0       	rjmp	.+32     	; 0x11c <__vector_11+0x68>
	   }
	else if(data=='Y')
  fc:	89 35       	cpi	r24, 0x59	; 89
  fe:	81 f4       	brne	.+32     	; 0x120 <__vector_11+0x6c>
	   {
		LCDClear();
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
	 	PORTB=0b00000010;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	88 bb       	out	0x18, r24	; 24
		LCDWriteStringXY(0,1,"REVERSE");
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	0e 94 1c 02 	call	0x438	; 0x438 <LCDGotoXY>
 118:	88 e6       	ldi	r24, 0x68	; 104
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 b0 01 	call	0x360	; 0x360 <LCDWriteString>
		}
    }
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <main>:
	uint16_t i;
	for(i=0;i<count;i++)
	_delay_ms(1);
}
void main()
{
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	1f 93       	push	r17
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	2a 97       	sbiw	r28, 0x0a	; 10
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_val;
	uint8_t FSR1;
	DDRB=0xFF;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	87 bb       	out	0x17, r24	; 23
	InitLCD(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 85 01 	call	0x30a	; 0x30a <InitLCD>
	USARTInit(51);
 16a:	83 e3       	ldi	r24, 0x33	; 51
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 25 02 	call	0x44a	; 0x44a <USARTInit>
	InitADC();
 172:	0e 94 1f 01 	call	0x23e	; 0x23e <InitADC>
	LCDClear();
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
	LCDWriteString("Temperature");
 182:	80 e7       	ldi	r24, 0x70	; 112
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 b0 01 	call	0x360	; 0x360 <LCDWriteString>
	LCDWriteStringXY(0,1,"Monitoring Node");
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	0e 94 1c 02 	call	0x438	; 0x438 <LCDGotoXY>
 192:	8c e7       	ldi	r24, 0x7C	; 124
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 b0 01 	call	0x360	; 0x360 <LCDWriteString>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2a ef       	ldi	r18, 0xFA	; 250
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x62>
#include <avr/interrupt.h>

void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	84 31       	cpi	r24, 0x14	; 20
 1ac:	91 05       	cpc	r25, r1
 1ae:	c9 f7       	brne	.-14     	; 0x1a2 <main+0x60>
	LCDWriteString("Temperature");
	LCDWriteStringXY(0,1,"Monitoring Node");
	char arr[10];
	delay(20);

	LCDClear();
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
	LCDWriteString("Temperature 0C");
 1bc:	8c e8       	ldi	r24, 0x8C	; 140
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 b0 01 	call	0x360	; 0x360 <LCDWriteString>
	 sei();
 1c4:	78 94       	sei
 1c6:	8a ef       	ldi	r24, 0xFA	; 250
 1c8:	c8 2e       	mov	r12, r24
 1ca:	d1 2c       	mov	r13, r1
	{
	 	char adc_val=ReadADC(0);
		FSR1=adc_val/2;
     	delay(100);
		write("FSR1:");
		itoa(FSR1,arr,10);
 1cc:	7e 01       	movw	r14, r28
 1ce:	08 94       	sec
 1d0:	e1 1c       	adc	r14, r1
 1d2:	f1 1c       	adc	r15, r1
	LCDClear();
	LCDWriteString("Temperature 0C");
	 sei();
	while(1)
	{
	 	char adc_val=ReadADC(0);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 24 01 	call	0x248	; 0x248 <ReadADC>
 1dc:	18 2f       	mov	r17, r24
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	f6 01       	movw	r30, r12
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0xa2>
#include <avr/interrupt.h>

void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	84 36       	cpi	r24, 0x64	; 100
 1ec:	91 05       	cpc	r25, r1
 1ee:	c9 f7       	brne	.-14     	; 0x1e2 <main+0xa0>
	while(1)
	{
	 	char adc_val=ReadADC(0);
		FSR1=adc_val/2;
     	delay(100);
		write("FSR1:");
 1f0:	8b e9       	ldi	r24, 0x9B	; 155
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 91 02 	call	0x522	; 0x522 <write>
		itoa(FSR1,arr,10);
 1f8:	16 95       	lsr	r17
 1fa:	81 2f       	mov	r24, r17
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	b7 01       	movw	r22, r14
 200:	4a e0       	ldi	r20, 0x0A	; 10
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	0e 94 c2 02 	call	0x584	; 0x584 <itoa>
		write(arr);
 208:	c7 01       	movw	r24, r14
 20a:	0e 94 91 02 	call	0x522	; 0x522 <write>
		USARTWriteChar('\n');
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 30 02 	call	0x460	; 0x460 <USARTWriteChar>
		LCDWriteIntXY(0,1,FSR1,3);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	0e 94 1c 02 	call	0x438	; 0x438 <LCDGotoXY>
 21e:	81 2f       	mov	r24, r17
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	63 e0       	ldi	r22, 0x03	; 3
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 be 01 	call	0x37c	; 0x37c <LCDWriteInt>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	f6 01       	movw	r30, r12
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xee>
#include <avr/interrupt.h>

void delay(uint16_t count)
{
	uint16_t i;
	for(i=0;i<count;i++)
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	84 36       	cpi	r24, 0x64	; 100
 238:	91 05       	cpc	r25, r1
 23a:	c9 f7       	brne	.-14     	; 0x22e <main+0xec>
 23c:	cb cf       	rjmp	.-106    	; 0x1d4 <main+0x92>

0000023e <InitADC>:
#include<avr/io.h>

void InitADC()
{
ADMUX=(1<<REFS0);// For Aref=AVcc;
 23e:	80 e4       	ldi	r24, 0x40	; 64
 240:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(7<<ADPS0);
 242:	87 e8       	ldi	r24, 0x87	; 135
 244:	86 b9       	out	0x06, r24	; 6
}
 246:	08 95       	ret

00000248 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ADMUX&=0xf8;
 248:	97 b1       	in	r25, 0x07	; 7
 24a:	98 7f       	andi	r25, 0xF8	; 248
 24c:	97 b9       	out	0x07, r25	; 7
	ch=ch&0b00000111;
	ADMUX|=ch;
 24e:	97 b1       	in	r25, 0x07	; 7
 250:	87 70       	andi	r24, 0x07	; 7
 252:	89 2b       	or	r24, r25
 254:	87 b9       	out	0x07, r24	; 7
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 256:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 258:	34 9b       	sbis	0x06, 4	; 6
 25a:	fe cf       	rjmp	.-4      	; 0x258 <ReadADC+0x10>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
 25c:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
 25e:	24 b1       	in	r18, 0x04	; 4
 260:	35 b1       	in	r19, 0x05	; 5
}
 262:	c9 01       	movw	r24, r18
 264:	08 95       	ret

00000266 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 266:	84 b3       	in	r24, 0x14	; 20
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 26c:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 26e:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	97 9a       	sbi	0x12, 7	; 18
 27a:	82 2f       	mov	r24, r18
 27c:	8a 95       	dec	r24
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 280:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 282:	82 95       	swap	r24
 284:	80 7f       	andi	r24, 0xF0	; 240
 286:	92 2f       	mov	r25, r18
 288:	9a 95       	dec	r25
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 28c:	97 98       	cbi	0x12, 7	; 18
 28e:	92 2f       	mov	r25, r18
 290:	9a 95       	dec	r25
 292:	f1 f7       	brne	.-4      	; 0x290 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 294:	97 9a       	sbi	0x12, 7	; 18
 296:	92 2f       	mov	r25, r18
 298:	9a 95       	dec	r25
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 29c:	93 b3       	in	r25, 0x13	; 19
 29e:	92 2f       	mov	r25, r18
 2a0:	9a 95       	dec	r25
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 2a4:	97 98       	cbi	0x12, 7	; 18
 2a6:	92 2f       	mov	r25, r18
 2a8:	9a 95       	dec	r25
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 2ac:	87 fd       	sbrc	r24, 7
 2ae:	e4 cf       	rjmp	.-56     	; 0x278 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 2b0:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 2b2:	84 b3       	in	r24, 0x14	; 20
 2b4:	8f 60       	ori	r24, 0x0F	; 15
 2b6:	84 bb       	out	0x14, r24	; 20

}
 2b8:	08 95       	ret

000002ba <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 2ba:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 2bc:	66 23       	and	r22, r22
 2be:	11 f4       	brne	.+4      	; 0x2c4 <LCDByte+0xa>
	CLEAR_RS();
 2c0:	96 98       	cbi	0x12, 6	; 18
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <LCDByte+0xc>
else
	SET_RS();
 2c4:	96 9a       	sbi	0x12, 6	; 18
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	82 2f       	mov	r24, r18
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 2ce:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 2d0:	85 b3       	in	r24, 0x15	; 21
 2d2:	93 2f       	mov	r25, r19
 2d4:	92 95       	swap	r25
 2d6:	9f 70       	andi	r25, 0x0F	; 15
 2d8:	80 7f       	andi	r24, 0xF0	; 240
 2da:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 2dc:	95 bb       	out	0x15, r25	; 21
 2de:	82 2f       	mov	r24, r18
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 2e4:	97 98       	cbi	0x12, 7	; 18
 2e6:	82 2f       	mov	r24, r18
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 2ec:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 2ee:	85 b3       	in	r24, 0x15	; 21
 2f0:	3f 70       	andi	r19, 0x0F	; 15
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 2f6:	85 bb       	out	0x15, r24	; 21
 2f8:	82 2f       	mov	r24, r18
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 2fe:	97 98       	cbi	0x12, 7	; 18
 300:	2a 95       	dec	r18
 302:	f1 f7       	brne	.-4      	; 0x300 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 304:	0e 94 33 01 	call	0x266	; 0x266 <LCDBusyLoop>
}
 308:	08 95       	ret

0000030a <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 30a:	1f 93       	push	r17
 30c:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 30e:	8b e3       	ldi	r24, 0x3B	; 59
 310:	9b e2       	ldi	r25, 0x2B	; 43
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 316:	84 b3       	in	r24, 0x14	; 20
 318:	8f 60       	ori	r24, 0x0F	; 15
 31a:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 31c:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 31e:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 320:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 322:	85 b3       	in	r24, 0x15	; 21
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 328:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 32a:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 32c:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	98 2f       	mov	r25, r24
 332:	9a 95       	dec	r25
 334:	f1 f7       	brne	.-4      	; 0x332 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 336:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 338:	a9 9a       	sbi	0x15, 1	; 21
 33a:	98 2f       	mov	r25, r24
 33c:	9a 95       	dec	r25
 33e:	f1 f7       	brne	.-4      	; 0x33c <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 340:	97 98       	cbi	0x12, 7	; 18
 342:	8a 95       	dec	r24
 344:	f1 f7       	brne	.-4      	; 0x342 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 346:	0e 94 33 01 	call	0x266	; 0x266 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 34a:	81 2f       	mov	r24, r17
 34c:	8c 60       	ori	r24, 0x0C	; 12
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 354:	88 e2       	ldi	r24, 0x28	; 40
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
}
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
 366:	04 c0       	rjmp	.+8      	; 0x370 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
	msg++;
 36e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 370:	88 81       	ld	r24, Y
 372:	88 23       	and	r24, r24
 374:	c9 f7       	brne	.-14     	; 0x368 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	00 d0       	rcall	.+0      	; 0x38a <LCDWriteInt+0xe>
 38a:	00 d0       	rcall	.+0      	; 0x38c <LCDWriteInt+0x10>
 38c:	0f 92       	push	r0
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	9c 01       	movw	r18, r24
 394:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 396:	fe 01       	movw	r30, r28
 398:	31 96       	adiw	r30, 0x01	; 1
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	df 01       	movw	r26, r30
 39e:	1d 92       	st	X+, r1
 3a0:	8a 95       	dec	r24
 3a2:	e9 f7       	brne	.-6      	; 0x39e <LCDWriteInt+0x22>
 3a4:	fe 01       	movw	r30, r28
 3a6:	35 96       	adiw	r30, 0x05	; 5
 3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 3aa:	c9 01       	movw	r24, r18
 3ac:	6a e0       	ldi	r22, 0x0A	; 10
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 3b4:	80 83       	st	Z, r24
	val=val/10;
 3b6:	c9 01       	movw	r24, r18
 3b8:	6a e0       	ldi	r22, 0x0A	; 10
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 3c0:	9b 01       	movw	r18, r22
 3c2:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 3c4:	21 15       	cp	r18, r1
 3c6:	31 05       	cpc	r19, r1
 3c8:	81 f7       	brne	.-32     	; 0x3aa <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 3ca:	bf ef       	ldi	r27, 0xFF	; 255
 3cc:	0f 3f       	cpi	r16, 0xFF	; 255
 3ce:	1b 07       	cpc	r17, r27
 3d0:	79 f4       	brne	.+30     	; 0x3f0 <LCDWriteInt+0x74>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 3d6:	ae 01       	movw	r20, r28
 3d8:	4f 5f       	subi	r20, 0xFF	; 255
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <LCDWriteInt+0x66>
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	fa 01       	movw	r30, r20
 3e4:	e2 0f       	add	r30, r18
 3e6:	f3 1f       	adc	r31, r19
 3e8:	80 81       	ld	r24, Z
 3ea:	88 23       	and	r24, r24
 3ec:	c1 f3       	breq	.-16     	; 0x3de <LCDWriteInt+0x62>
 3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 3f0:	25 e0       	ldi	r18, 0x05	; 5
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	20 1b       	sub	r18, r16
 3f6:	31 0b       	sbc	r19, r17
 3f8:	7e 01       	movw	r14, r28
 3fa:	08 94       	sec
 3fc:	e1 1c       	adc	r14, r1
 3fe:	f1 1c       	adc	r15, r1
 400:	e2 0e       	add	r14, r18
 402:	f3 1e       	adc	r15, r19
 404:	89 01       	movw	r16, r18
 406:	09 c0       	rjmp	.+18     	; 0x41a <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 408:	f7 01       	movw	r30, r14
 40a:	81 91       	ld	r24, Z+
 40c:	7f 01       	movw	r14, r30
 40e:	80 5d       	subi	r24, 0xD0	; 208
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	05 30       	cpi	r16, 0x05	; 5
 41c:	11 05       	cpc	r17, r1
 41e:	a4 f3       	brlt	.-24     	; 0x408 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	cf 91       	pop	r28
 42c:	df 91       	pop	r29
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	08 95       	ret

00000438 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 438:	88 32       	cpi	r24, 0x28	; 40
 43a:	30 f4       	brcc	.+12     	; 0x448 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 43c:	61 11       	cpse	r22, r1
 43e:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 440:	80 68       	ori	r24, 0x80	; 128
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDByte>
 448:	08 95       	ret

0000044a <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 44a:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 44c:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 44e:	86 e8       	ldi	r24, 0x86	; 134
 450:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 452:	88 ed       	ldi	r24, 0xD8	; 216
 454:	8a b9       	out	0x0a, r24	; 10


}
 456:	08 95       	ret

00000458 <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 458:	5f 9b       	sbis	0x0b, 7	; 11
 45a:	fe cf       	rjmp	.-4      	; 0x458 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 45c:	8c b1       	in	r24, 0x0c	; 12
}
 45e:	08 95       	ret

00000460 <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 460:	5d 9b       	sbis	0x0b, 5	; 11
 462:	fe cf       	rjmp	.-4      	; 0x460 <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 464:	8c b9       	out	0x0c, r24	; 12
}
 466:	08 95       	ret

00000468 <USARTWriteInt>:



void USARTWriteInt(int val,unsigned int field_length)
{
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	00 d0       	rcall	.+0      	; 0x472 <USARTWriteInt+0xa>
 472:	00 d0       	rcall	.+0      	; 0x474 <USARTWriteInt+0xc>
 474:	0f 92       	push	r0
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	9c 01       	movw	r18, r24
 47c:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 47e:	fe 01       	movw	r30, r28
 480:	31 96       	adiw	r30, 0x01	; 1
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	df 01       	movw	r26, r30
 486:	1d 92       	st	X+, r1
 488:	8a 95       	dec	r24
 48a:	e9 f7       	brne	.-6      	; 0x486 <USARTWriteInt+0x1e>
 48c:	fe 01       	movw	r30, r28
 48e:	35 96       	adiw	r30, 0x05	; 5
 490:	0d c0       	rjmp	.+26     	; 0x4ac <USARTWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 492:	c9 01       	movw	r24, r18
 494:	6a e0       	ldi	r22, 0x0A	; 10
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 49c:	80 83       	st	Z, r24
	val=val/10;
 49e:	c9 01       	movw	r24, r18
 4a0:	6a e0       	ldi	r22, 0x0A	; 10
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 4a8:	9b 01       	movw	r18, r22
 4aa:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 4ac:	21 15       	cp	r18, r1
 4ae:	31 05       	cpc	r19, r1
 4b0:	81 f7       	brne	.-32     	; 0x492 <USARTWriteInt+0x2a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 4b2:	bf ef       	ldi	r27, 0xFF	; 255
 4b4:	0f 3f       	cpi	r16, 0xFF	; 255
 4b6:	1b 07       	cpc	r17, r27
 4b8:	71 f4       	brne	.+28     	; 0x4d6 <USARTWriteInt+0x6e>
 4ba:	a0 e0       	ldi	r26, 0x00	; 0
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
		while(str[j]==0) j++;
 4be:	9e 01       	movw	r18, r28
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <USARTWriteInt+0x60>
 4c6:	11 96       	adiw	r26, 0x01	; 1
 4c8:	f9 01       	movw	r30, r18
 4ca:	ea 0f       	add	r30, r26
 4cc:	fb 1f       	adc	r31, r27
 4ce:	80 81       	ld	r24, Z
 4d0:	88 23       	and	r24, r24
 4d2:	c9 f3       	breq	.-14     	; 0x4c6 <USARTWriteInt+0x5e>
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <USARTWriteInt+0x76>
	else
		j=5-field_length;
 4d6:	a5 e0       	ldi	r26, 0x05	; 5
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	a0 1b       	sub	r26, r16
 4dc:	b1 0b       	sbc	r27, r17

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
 4de:	a5 30       	cpi	r26, 0x05	; 5
 4e0:	b1 05       	cpc	r27, r1
 4e2:	ac f4       	brge	.+42     	; 0x50e <USARTWriteInt+0xa6>
	{
	USARTWriteChar(48+str[i]);
 4e4:	ac 0f       	add	r26, r28
 4e6:	bd 1f       	adc	r27, r29
 4e8:	11 96       	adiw	r26, 0x01	; 1
 4ea:	8c 91       	ld	r24, X
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 4ec:	5d 9b       	sbis	0x0b, 5	; 11
 4ee:	fe cf       	rjmp	.-4      	; 0x4ec <USARTWriteInt+0x84>
		j=5-field_length;

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
	{
	USARTWriteChar(48+str[i]);
 4f0:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 4f2:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4f4:	84 ec       	ldi	r24, 0xC4	; 196
 4f6:	99 e0       	ldi	r25, 0x09	; 9
 4f8:	fc 01       	movw	r30, r24
 4fa:	31 97       	sbiw	r30, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <USARTWriteInt+0x92>
 4fe:	fc 01       	movw	r30, r24
 500:	31 97       	sbiw	r30, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <USARTWriteInt+0x98>
 504:	fc 01       	movw	r30, r24
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <USARTWriteInt+0x9e>
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <USARTWriteInt+0xa2>
	//USARTWriteChar(48+str[i]);
	for(i=0;i<4;i++)
	{
	_delay_ms(10);
	}
}}
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	cf 91       	pop	r28
 51a:	df 91       	pop	r29
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <write>:

void write(char *data)
{
 522:	fc 01       	movw	r30, r24
 524:	04 c0       	rjmp	.+8      	; 0x52e <write+0xc>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 526:	5d 9b       	sbis	0x0b, 5	; 11
 528:	fe cf       	rjmp	.-4      	; 0x526 <write+0x4>
{
	//USARTWriteChar('#');
	//USARTWriteChar(3);
	//USARTWriteChar(1);
	while(*data)
	USARTWriteChar(*data++);
 52a:	31 96       	adiw	r30, 0x01	; 1
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 52c:	8c b9       	out	0x0c, r24	; 12
void write(char *data)
{
	//USARTWriteChar('#');
	//USARTWriteChar(3);
	//USARTWriteChar(1);
	while(*data)
 52e:	80 81       	ld	r24, Z
 530:	88 23       	and	r24, r24
 532:	c9 f7       	brne	.-14     	; 0x526 <write+0x4>
	USARTWriteChar(*data++);
	//USARTWriteChar('\n');
	//USARTWriteInt(data,2);
	//while(*data) USARTWriteChar(*data++);
}
 534:	08 95       	ret

00000536 <__divmodhi4>:
 536:	97 fb       	bst	r25, 7
 538:	09 2e       	mov	r0, r25
 53a:	07 26       	eor	r0, r23
 53c:	0a d0       	rcall	.+20     	; 0x552 <__divmodhi4_neg1>
 53e:	77 fd       	sbrc	r23, 7
 540:	04 d0       	rcall	.+8      	; 0x54a <__divmodhi4_neg2>
 542:	0c d0       	rcall	.+24     	; 0x55c <__udivmodhi4>
 544:	06 d0       	rcall	.+12     	; 0x552 <__divmodhi4_neg1>
 546:	00 20       	and	r0, r0
 548:	1a f4       	brpl	.+6      	; 0x550 <__divmodhi4_exit>

0000054a <__divmodhi4_neg2>:
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255

00000550 <__divmodhi4_exit>:
 550:	08 95       	ret

00000552 <__divmodhi4_neg1>:
 552:	f6 f7       	brtc	.-4      	; 0x550 <__divmodhi4_exit>
 554:	90 95       	com	r25
 556:	81 95       	neg	r24
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__udivmodhi4>:
 55c:	aa 1b       	sub	r26, r26
 55e:	bb 1b       	sub	r27, r27
 560:	51 e1       	ldi	r21, 0x11	; 17
 562:	07 c0       	rjmp	.+14     	; 0x572 <__udivmodhi4_ep>

00000564 <__udivmodhi4_loop>:
 564:	aa 1f       	adc	r26, r26
 566:	bb 1f       	adc	r27, r27
 568:	a6 17       	cp	r26, r22
 56a:	b7 07       	cpc	r27, r23
 56c:	10 f0       	brcs	.+4      	; 0x572 <__udivmodhi4_ep>
 56e:	a6 1b       	sub	r26, r22
 570:	b7 0b       	sbc	r27, r23

00000572 <__udivmodhi4_ep>:
 572:	88 1f       	adc	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	5a 95       	dec	r21
 578:	a9 f7       	brne	.-22     	; 0x564 <__udivmodhi4_loop>
 57a:	80 95       	com	r24
 57c:	90 95       	com	r25
 57e:	bc 01       	movw	r22, r24
 580:	cd 01       	movw	r24, r26
 582:	08 95       	ret

00000584 <itoa>:
 584:	fb 01       	movw	r30, r22
 586:	9f 01       	movw	r18, r30
 588:	e8 94       	clt
 58a:	42 30       	cpi	r20, 0x02	; 2
 58c:	c4 f0       	brlt	.+48     	; 0x5be <itoa+0x3a>
 58e:	45 32       	cpi	r20, 0x25	; 37
 590:	b4 f4       	brge	.+44     	; 0x5be <itoa+0x3a>
 592:	4a 30       	cpi	r20, 0x0A	; 10
 594:	29 f4       	brne	.+10     	; 0x5a0 <itoa+0x1c>
 596:	97 fb       	bst	r25, 7
 598:	1e f4       	brtc	.+6      	; 0x5a0 <itoa+0x1c>
 59a:	90 95       	com	r25
 59c:	81 95       	neg	r24
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	64 2f       	mov	r22, r20
 5a2:	77 27       	eor	r23, r23
 5a4:	0e 94 ae 02 	call	0x55c	; 0x55c <__udivmodhi4>
 5a8:	80 5d       	subi	r24, 0xD0	; 208
 5aa:	8a 33       	cpi	r24, 0x3A	; 58
 5ac:	0c f0       	brlt	.+2      	; 0x5b0 <itoa+0x2c>
 5ae:	89 5d       	subi	r24, 0xD9	; 217
 5b0:	81 93       	st	Z+, r24
 5b2:	cb 01       	movw	r24, r22
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	a1 f7       	brne	.-24     	; 0x5a0 <itoa+0x1c>
 5b8:	16 f4       	brtc	.+4      	; 0x5be <itoa+0x3a>
 5ba:	5d e2       	ldi	r21, 0x2D	; 45
 5bc:	51 93       	st	Z+, r21
 5be:	10 82       	st	Z, r1
 5c0:	c9 01       	movw	r24, r18
 5c2:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <strrev>

000005c6 <strrev>:
 5c6:	dc 01       	movw	r26, r24
 5c8:	fc 01       	movw	r30, r24
 5ca:	67 2f       	mov	r22, r23
 5cc:	71 91       	ld	r23, Z+
 5ce:	77 23       	and	r23, r23
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <strrev+0x4>
 5d2:	32 97       	sbiw	r30, 0x02	; 2
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <strrev+0x18>
 5d6:	7c 91       	ld	r23, X
 5d8:	6d 93       	st	X+, r22
 5da:	70 83       	st	Z, r23
 5dc:	62 91       	ld	r22, -Z
 5de:	ae 17       	cp	r26, r30
 5e0:	bf 07       	cpc	r27, r31
 5e2:	c8 f3       	brcs	.-14     	; 0x5d6 <strrev+0x10>
 5e4:	08 95       	ret

000005e6 <_exit>:
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
